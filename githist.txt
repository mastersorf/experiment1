  663  yum install git
  664  git --version
  665  git config --global user.name "mastersorf"
  666  git config --global user.email "sorvilovsv@gmail.com"
  667  git config --system core.editor "/bin/vim"
  669  cat /etc/gitconfig 
  672  git config --system my.editing "/bin/false" #adding our own config
  673  cat /etc/gitconfig 
  674  vim /etc/gitconfig # deleting our own config from gitconfig
  675  cat /etc/gitconfig 

_________lesson2____gitstart__________

  684  mkdir repo
  685  cd repo
  686  git init .
  687  echo Initialized empty Git repository in /root/repo/.git/
  689  cd .git
  691  cd branches/
  693  cd ..
  694  echo "to deinitalise do: fm -rf git"
  696  echo "this is readme file" >> readme.md
  697  echo "this is avalid source file" > source.c
  698  git status
  699  clear
  700  echo "git config user.name "user" \# overrides the global settings of git"
  701  echo "git config user.email "user@gmail.com" \# overrides the global settings of git step2"
  702  git status
  703  git add .
  704  git status
  705  echo "testfile" >> test.txt
  706  git status
  707  git add test.txt 
  708  git status
  709  git commit -m "Testing first commit"
  710  git status
  711  vim readme.md 
  712  git status
  713  echo "new file" >test2.txt
  714  git status
  715  git commit -a -m "Commit tracked files and leaving untracked files as is"
  716  git status
  717  git add .
  718  git commit -m "new text file"
  719  git status
  720  mkdir new
  721  mkdir new1
  722  echo "test" > /new/test1.txt
  723  echo "test2" > /new1/test2.txt
  724  ls
  725  echo "test2" > /new1/test2.txt
  726  echo "test1" > /new/new.txt
  727  echo "test1" > new.txt
  728  rm -f new.txt 
  729  ls -lA
  730  touch new/new.txt
  731  rm new/new.txt
  732  echo "test1" > new/new.txt
  733  echo "test2" > new1/new1.txt
  734  git status
  735  git add .
  736  git status
  737  git commit -m "new files in new folders"
  738  git status
  739  rm test2.txt 
#rm would NOT remove filetracking from git
  740  git status
  741  git commit -m "removed test2.txt"
  742  git status
  743  git rm test2.txt
  744  git status
#git rm would remove file from git
  745  ls
  746  git commit -m "text2.txt removed by git rm"
  747  git status

_________lesson3____gitstart____"logging"______

  762  mv git.txt githist.txt
  763  git add .
  764  git commit -m "Saving a history"
  765  git status
  766  vim githist.txt 
  767  git add .
  768  git commit -m "Saving a history"
  769  git status
  770  git log
  771  git log --oneline
  772  git log -p
  773  git log --test.txt
  774  git log -- test.txt
  775  git log --oneline test.txt
  776  git log --oneline new.txt
  777  git log --oneline new/new.txt 
  778  git log --author="master"
  779  git log --grep="histor"
  780  git log --graph 
  781  git log --graph decorate
  782  git log --graph --decorate
  783  man git log



______________git_clonning__________________
 
  793  mkdir work
  794  cd work/
  795  git clone /root/repo/ .
  796  vim test.txt
  797  git status
  798  git commit -m "modifided localcopy"
  799  git add .
  800  git commit -m "modifided localcopy"
  801  ls
  802  echo "sometimes here would be an `empty ident name` error and we must reassign our gituser and email"
  803  git config user "sorf2"
  804  git config user.name "sorf2"
  805  git config user.mail "sorf2"
  806  git config user.mail "sorf2@1234.com"
  807  git config user.email "sorf2@1234.com"
  808  cd .git
  809  ls
  810  cat conf
  811  cat config 
  812  vim config 
  813  echo "I modified the .git/config file, because there should not be any user.mail option, only user.email.option"
  814  cd ..
  815  git add .
  816  git commit -m "changes in new folder work2"
  817  echo "it was the first way to clone repository"
  818  mkdir workdir
  819  rm -rf workdir/
  820  cd ..
  821  mkdir git
  822  mv work/ git
  823  ls
  824  mv repo/ git
  825  ls
  826  cd git
  827  mkdir workdir
  828  cd workdir/
  829  git clone root@10.63.200.59:repo
  830  cat /etc/gitconfig 
  831  git clone root@10.63.200.59:git/repo
  832  ls
  833  rm -rf repo
  834  git clone root@10.63.200.59:git/repo .
  835  ls
  836  cd ..
  837  mkdir github
  838  cd github/
  839  git clone https://github.com/mastersorf/experiment1.git
  840  git status
  841  ls
  842  cd experiment1/
  843  git status
  844  clear
  845  ls
  846  vim readme.md
  847  git config user.name "developer1"
  848  git config user.email "developer1@sorf.com"
  849  cat README
  850  cat README.md 
  851  vim README.md 
  852  git add .
  853  git commit -m "Added `zero hero` text into README.md"
  854  git commit -m "Added 'zero hero' text into README.md"
  855  git status
  856  vim README.md 
  857  git status
  858  git add .
  859  git push origin master
  860  git status
  861  git add .
  862  git status
  863  git push origin master
  864  vim README.md 
  865  git status
  866  git commit -m "some text added"
  867  git push origin master
  868  cd ..
  869  ls
  870  cd ..
  871  ls
  872  cp git/repo/githist.txt github/experiment1/githist.txt
  873  cd github/experiment1/
  874  git add .
  875  git commit -m "adding histfile la lessons"
  876  git push origin master
  877  history 40 >> githist.txt 
  878  vim githist.txt 
  879  history 90 >> githist.txt 
  880  vim githist.txt 
  881  history 100 >> githist.txt 

_____________installing____.git___on zbx.sorf_______

  513  cd /root/git/repo/
  514  git status
  515  touch nefile.txt
  516  git add .
  517  git commit -m "clear file adding"
  518  git status
  519  git config --global user.name "mastersorf"
  520  git config --global user.mail "sorvilovsv@gmail.com"
  521  git --global core.excludesfile '/etc/gitignore'
  

_________________ignoring_content__globally_and_locally_______

522  git config --global core.excludesfile '/etc/gitignore'
  523  vim /etc/gitignore
  524  pwd
  525  git status
  526  touch source.c source.out
  527  ls
  528  git status
  529  git add .
  530  git commit -m "adding files, testing exclusion: source.outis untracked"
  531  git status
  532  echo "creating local gitignore file"
  533  vim .gitignore
  534  echo "locally ugnore .bak"
  535  echo "locally ignore .bak"
  536  cp source.c source.bak
  537  git status
  538  ls
  539  ll
  540  vim .gitignore
  541  git status
  542  mv .gitignore .git/
  543  ls
  544  ll .git
  545  ls -lA .git
  546  git status
  547  git config --global .gitignore
  548  history | grep gitign
  549  git config --global core.excludefile .gitignore
  550  git status
  551  cp .git/.gitignore .
  552  ls -lA
  553  git status
  554  vim /etc/gitconfig
  555  history | grep global
  556  cd /etc
  557  ls
  558  ls -la | grep git
  559  vim gitconfig 
  560  rm -f gitconfig 
  561  find / -name "gitconfig"
  562  history | grep gitconf
  563  history | grep excludefil
  564  git config --global core.excludesfile
  565  history | grep excludes
  566  ls
  567  cd /root/git/repo/
  568  ls
  569  mv .git/.gitignore .
  570  ls -la
  571  cd .git
  572  ls -la
  573  rm -f .gitignore 
  574  cd ..
  575  git status
  576  vim .gitignore 
  577  git status
  578  git add .
  579  git commit -m ".gitignore local file added"
  580  mkdir.tmp
  581  git status
  582  echo "emty folders are untracked"
  583  vim .gitignore 
  584  touch tmp/hello.txt
  585  git status
  586  git add .
  587  git commit -m "ignoring local tmp folder by adding tmp/* into .gitirnore file"
  588  git status


