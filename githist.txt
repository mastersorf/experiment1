  663  yum install git
  664  git --version
  665  git config --global user.name "mastersorf"
  666  git config --global user.email "sorvilovsv@gmail.com"
  667  git config --system core.editor "/bin/vim"
  669  cat /etc/gitconfig 
  672  git config --system my.editing "/bin/false" #adding our own config
  673  cat /etc/gitconfig 
  674  vim /etc/gitconfig # deleting our own config from gitconfig
  675  cat /etc/gitconfig 

_________lesson2____gitstart__________

  684  mkdir repo
  685  cd repo
  686  git init .
  687  echo Initialized empty Git repository in /root/repo/.git/
  689  cd .git
  691  cd branches/
  693  cd ..
  694  echo "to deinitalise do: fm -rf git"
  696  echo "this is readme file" >> readme.md
  697  echo "this is avalid source file" > source.c
  698  git status
  699  clear
  700  echo "git config user.name "user" \# overrides the global settings of git"
  701  echo "git config user.email "user@gmail.com" \# overrides the global settings of git step2"
  702  git status
  703  git add .
  704  git status
  705  echo "testfile" >> test.txt
  706  git status
  707  git add test.txt 
  708  git status
  709  git commit -m "Testing first commit"
  710  git status
  711  vim readme.md 
  712  git status
  713  echo "new file" >test2.txt
  714  git status
  715  git commit -a -m "Commit tracked files and leaving untracked files as is"
  716  git status
  717  git add .
  718  git commit -m "new text file"
  719  git status
  720  mkdir new
  721  mkdir new1
  722  echo "test" > /new/test1.txt
  723  echo "test2" > /new1/test2.txt
  724  ls
  725  echo "test2" > /new1/test2.txt
  726  echo "test1" > /new/new.txt
  727  echo "test1" > new.txt
  728  rm -f new.txt 
  729  ls -lA
  730  touch new/new.txt
  731  rm new/new.txt
  732  echo "test1" > new/new.txt
  733  echo "test2" > new1/new1.txt
  734  git status
  735  git add .
  736  git status
  737  git commit -m "new files in new folders"
  738  git status
  739  rm test2.txt 
#rm would NOT remove filetracking from git
  740  git status
  741  git commit -m "removed test2.txt"
  742  git status
  743  git rm test2.txt
  744  git status
#git rm would remove file from git
  745  ls
  746  git commit -m "text2.txt removed by git rm"
  747  git status

_________lesson3____gitstart____"logging"______

  762  mv git.txt githist.txt
  763  git add .
  764  git commit -m "Saving a history"
  765  git status
  766  vim githist.txt 
  767  git add .
  768  git commit -m "Saving a history"
  769  git status
  770  git log
  771  git log --oneline
  772  git log -p
  773  git log --test.txt
  774  git log -- test.txt
  775  git log --oneline test.txt
  776  git log --oneline new.txt
  777  git log --oneline new/new.txt 
  778  git log --author="master"
  779  git log --grep="histor"
  780  git log --graph 
  781  git log --graph decorate
  782  git log --graph --decorate
  783  man git log



______________git_clonning__________________
 
  793  mkdir work
  794  cd work/
  795  git clone /root/repo/ .
  796  vim test.txt
  797  git status
  798  git commit -m "modifided localcopy"
  799  git add .
  800  git commit -m "modifided localcopy"
  801  ls
  802  echo "sometimes here would be an `empty ident name` error and we must reassign our gituser and email"
  803  git config user "sorf2"
  804  git config user.name "sorf2"
  805  git config user.mail "sorf2"
  806  git config user.mail "sorf2@1234.com"
  807  git config user.email "sorf2@1234.com"
  808  cd .git
  809  ls
  810  cat conf
  811  cat config 
  812  vim config 
  813  echo "I modified the .git/config file, because there should not be any user.mail option, only user.email.option"
  814  cd ..
  815  git add .
  816  git commit -m "changes in new folder work2"
  817  echo "it was the first way to clone repository"
  818  mkdir workdir
  819  rm -rf workdir/
  820  cd ..
  821  mkdir git
  822  mv work/ git
  823  ls
  824  mv repo/ git
  825  ls
  826  cd git
  827  mkdir workdir
  828  cd workdir/
  829  git clone root@10.63.200.59:repo
  830  cat /etc/gitconfig 
  831  git clone root@10.63.200.59:git/repo
  832  ls
  833  rm -rf repo
  834  git clone root@10.63.200.59:git/repo .
  835  ls
  836  cd ..
  837  mkdir github
  838  cd github/
  839  git clone https://github.com/mastersorf/experiment1.git
  840  git status
  841  ls
  842  cd experiment1/
  843  git status
  844  clear
  845  ls
  846  vim readme.md
  847  git config user.name "developer1"
  848  git config user.email "developer1@sorf.com"
  849  cat README
  850  cat README.md 
  851  vim README.md 
  852  git add .
  853  git commit -m "Added `zero hero` text into README.md"
  854  git commit -m "Added 'zero hero' text into README.md"
  855  git status
  856  vim README.md 
  857  git status
  858  git add .
  859  git push origin master
  860  git status
  861  git add .
  862  git status
  863  git push origin master
  864  vim README.md 
  865  git status
  866  git commit -m "some text added"
  867  git push origin master
  868  cd ..
  869  ls
  870  cd ..
  871  ls
  872  cp git/repo/githist.txt github/experiment1/githist.txt
  873  cd github/experiment1/
  874  git add .
  875  git commit -m "adding histfile la lessons"
  876  git push origin master
  877  history 40 >> githist.txt 
  878  vim githist.txt 
  879  history 90 >> githist.txt 
  880  vim githist.txt 
  881  history 100 >> githist.txt 

_____________installing____.git___on zbx.sorf_______

  513  cd /root/git/repo/
  514  git status
  515  touch nefile.txt
  516  git add .
  517  git commit -m "clear file adding"
  518  git status
  519  git config --global user.name "mastersorf"
  520  git config --global user.mail "sorvilovsv@gmail.com"
  521  git --global core.excludesfile '/etc/gitignore'
  

_________________ignoring_content__globally_and_locally_______

522  git config --global core.excludesfile '/etc/gitignore'
  523  vim /etc/gitignore
  524  pwd
  525  git status
  526  touch source.c source.out
  527  ls
  528  git status
  529  git add .
  530  git commit -m "adding files, testing exclusion: source.outis untracked"
  531  git status
  532  echo "creating local gitignore file"
  533  vim .gitignore
  534  echo "locally ugnore .bak"
  535  echo "locally ignore .bak"
  536  cp source.c source.bak
  537  git status
  538  ls
  539  ll
  540  vim .gitignore
  541  git status
  542  mv .gitignore .git/
  543  ls
  544  ll .git
  545  ls -lA .git
  546  git status
  547  git config --global .gitignore
  548  history | grep gitign
  549  git config --global core.excludefile .gitignore
  550  git status
  551  cp .git/.gitignore .
  552  ls -lA
  553  git status
  554  vim /etc/gitconfig
  555  history | grep global
  556  cd /etc
  557  ls
  558  ls -la | grep git
  559  vim gitconfig 
  560  rm -f gitconfig 
  561  find / -name "gitconfig"
  562  history | grep gitconf
  563  history | grep excludefil
  564  git config --global core.excludesfile
  565  history | grep excludes
  566  ls
  567  cd /root/git/repo/
  568  ls
  569  mv .git/.gitignore .
  570  ls -la
  571  cd .git
  572  ls -la
  573  rm -f .gitignore 
  574  cd ..
  575  git status
  576  vim .gitignore 
  577  git status
  578  git add .
  579  git commit -m ".gitignore local file added"
  580  mkdir.tmp
  581  git status
  582  echo "emty folders are untracked"
  583  vim .gitignore 
  584  touch tmp/hello.txt
  585  git status
  586  git add .
  587  git commit -m "ignoring local tmp folder by adding tmp/* into .gitirnore file"
  588  git status

____________BRANCHING_______la_lesson_______________________________________
_________________________________________________



  577  git status
  578  git add .
  579  git commit -m ".gitignore local file added"
  580  mkdir.tmp
  581  git status
  582  echo "emty folders are untracked"
  583  vim .gitignore 
  584  touch tmp/hello.txt
  585  git status
  586  git add .
  587  git commit -m "ignoring local tmp folder by adding tmp/* into .gitirnore file"
  588  git status
  589  cd /root/github/experiment1/
  590  ls
  591  echo "____LA______ignoring____content____lecture "
  592  history 80 >> githist.txt 
  593  vim githist.txt 
  594  git add .
  595  git commit -m "installing git on sorfzbx + lecture ignoring content"
  596  cd /root/git/repo/.git/
  597  ls -lA
  598  cat config
  599  grep -r "mastersorf"
  600  grep -r "sorf"
  601  grep -r "master"
  602  grep -r "sorvilov"
  603  cd /etc
  604  find / -name "*gitconf*"
  605  pwd
  606  cd /
  607  cat root/.gitconfig 
  608  cd root
  609  ді
  610  ды
  611  ls
  612  cp .gitconfig /etc/.gitconfig
  613  cd github/experiment1/
  614  git commit -m "installing git on sorfzbx + lecture ignoring content"
  615  rm -f /etc/.gitconfig 
  616  git config --global user.name "mastersorf"
  617  git config --global user.email "sorvilovsv@gmail.com"
  618  git config user.name "devops1"
  619  git config user.email "devops1@sorf.com"
  620  git commit -m "installing git on sorfzbx + lecture ignoring content"
  621  git push origin master
  622  cd /etc
  623  ls -lA | grep git
  624  cd root
  625  ls -lA 
  626  ls -lA | grep git
  627  pwd
  628  cd /root
  629  ls -lA | grep git
  630  git --global --list 
  631  git config --global --list 
  632  git config --global --edit 
  633  git config --list --show-origin
  634  git config --global --list --show-origin
  635  fing / -name ".gitconf*"
  636  find / -name ".gitconf*"
  637  cd /root
  638  ls -lA
  639  cat .gitconfig 
  640  git config --global user.email "sorvilovsv111@gmail.com"
  641  cat .gitconfig 
  642  git config --global user.email "sorvilovsv@gmail.com"
  643  cat .gitconfig 
  644  зцв
  645  pwd
  646  cd github/
  647  cd experiment1/.git/
  648  ls
  649  cat config 
  650  clear
  651  ls
  652  cat HEAD 
  653  cat index 
  654  ls
  655  cat packed-refs 
  656  cat COMMIT_EDITMSG 
  657  cat description 
  658  cd logs
  659  ls
  660  cat HEAD 
  661  cd refs/
  662  ls
  663  cd heads/
  664  ls
  665  cat master 
  666  cd ..
  667  cat remotes/
  668  cd remotes/
  669  ls
  670  cd origin/
  671  ls
  672  cat HEAD 
  673  cat master 
  674  cd ../..
  675  ls
  676  cd ../..
  677  pwd
  678  ls
  679  cd hooks/
  680  ls
  681  ls -lA
  682  cat prepare-commit-msg.sample 
  683  ls
  684  cd ..
  685  ls
  686  cd info/
  687  ls
  688  cat exclude 
  689  cd ..
  690  ls
  691  cd objects/
  692  ls
  693   ls -lA *
  694  cd 01
  695  ls
  696  ls -lA
  697  cat 01082762281e40d3e71474cd970b2051158da1 
  698  clear
  699  cd ../..
  700  ls
  701  \cd ..
  702  git status
  703  pwd
  704  git branch
  705  ls
  706  git branch dev
  707  git status
  708  git branch
  709  echo "'git branch' shows on what branch we are"
  710  echo "'git branch dev ' creates a new branch, but we are still on the branch master"
  711  git checkout dev
  712  echo "'git checkout dev' changes branch to dev"
  713  git branch
  714  ls
  715  ls -lA
  716  pwd
  717  cd ..
  718  mkdir brancxexp1
  719  cd brancxexp1/
  720  git clone https://github.com/mastersorf/experiment1.git .
  721  ls
  722  cp /root/git/repo/.gitignore .
  723  ls -lA
  724  git add .
  725  git commit -m ".gitignore localfile added"
  726  git push origin master
  727  cat .gitignore 
  728  clear
  729  git status
  730  git branch 
  731  git branch check -b dev
  732  git branch checkout -b dev
  733  clear
  734  git checkout -b dev
  735  echo ' 'git checkout -b dev' creates new branch named dev and checkouts to this branch from master branch'
  736  git branch
  737  echo 123 >> newfile.txt
  738  echo 123 >> 123.txt
  739  echo 123 >> oldfile.txt
  740  echo 123 >> oldfile.tmp
  741  git status
  742  pwd
  743  ls -la
  744  cat .gitignore 
  745  echo 123 >> oldfile.bak
  746  git status
  747  git add .
  748  git commit -m "first branch in project"
  749  git status
  750  git checkout master
  751  ls
  752  ls -lA
  753  echo "the files created in dev branch do not exist in master"
  754  git checkout -b ga #new branch
  755  ls
  756  git branch dev
  757  git checkout -b qa
  758  git branch master
  759  ls
  760  git checkout dev
  761  git checkout -b qa
  762  git checkout -b test1
  763  ls
  764  git branch
  765  echo "123123123" > test1only.txt
  766  git add .
  767  git commit -m "test1 branch only changes - creating a test1only.txt file"
  768  git status
  769  git checkout master
  770  git status
  771  ls
  772  cat test1.txt 
  773  history 150 >> githist.txt 
  774  git add .
  775  vim githist.txt 
  776  history 200  >> githist.txt 



__________________________________merging_________________________________
  779  git push origin master
  781  git branch
  782  ll
  783  vim README.md 
  784  git add .
  785  git commit -m "some updates in README.md"
  786  git checkout dev
  787  git status
  788  touch newfileondevbranch.txt
  789  git add .
  790  git commit -m "touch newfileondevbranch.txt"
  791  git push origin dev
  792  git checkout qa
  793  echo "branch new" > branchqa.txt
  794  git add .
  795  git commit "echo "branch new" > branchqa.txt"
  796  git branch
  797  git push origin qa
  798  git branch
  799  git merge dev
  800  git branch
  801  git checkout master
  802  git merge qa
  803  git checkout qa
  804  git add .
  805  git commit -m "mergin branches dev and qa"
  806  git checkout master
  807  git merge qa
  808  ll
  809  vim .gitignore 
  810  git add .
  811  git commit -m "merging qa branch into mastrer branch after merging dev branch into qa branch"
  812  git push origin master
  813  vim oldfile.tmp
  814  git status
  815  vim .gitignore 
  816  touch 222.bak
  817  git status
  818  touch newtmpfileaftertmpgitignore.tmp
  819  git status
  820  git add
  821  git add .
  822  git status
  823  git commit -m "files added before changing in gitignore are tracked"
  824  mv oldfile.tmp oldfile1.tmp
  825  git status
  826* git
  827  git commit -m "files added before changing in gitignore are tracked, but moving files or removing makes them untracked"
  828  clear
  829  git checkout qa
  830  git status
  831  git add .
  832  git commit -m "changes in qa branch"
  833  git push origin qa
  834  vim .gitignore 
  835  ls -la
  836  git branch
  837  git checkout ga
  838  ls -la
  839  cd ..
  840  ls
  841  ls -la
  842  git branch
  843  cd brancxexp1/
  844  ls
  845  git branch
  846  cd .git
  847  ls
  848  cd branches/
  849  ls
  850  ls -la
  851  cd ..
  852  ls
  853  find / -name "qaonl"
  854  find / -name "*qaonl*"
  855  find / -name "*qa*"
  856  find . -name "*qa*"
  857  find . -name "*dev*"
  858  ll
  859  git checkout dev
  860  ll
  861  find . -name "newfileondevbr*"
  862  git checkout ga
  863  find . -name "newfileondevbr*"
  864  man find
  865  grep "newfileondevbr*"
  866  ls
  867  cat file5.txt 
  868  echo exclusiveinfo >> file5.txt 
  869  grep "exclusi"
  870  grep -r "exclusi"
  871  grep -r "newfileondevbr*"
  872  git chkout dev
  873  git chekout dev
  874  git checkout dev
  875  touch devnewexclusivefile.txt
  876  git checkout ga
  877  grep -r "*devnewexclus*"
  878  git checkout dev
  879  grep -r "*devnewexclus*"
  880  grep -r "devnewexclus*"
  881  grep -r "devnewexclus"
  882  ll
  883  grep -r "dev"
  884  grep -r "devnew"
  885  ll
  886  echo devnewexclusive >> devnewexclusivefile.txt 
  887  grep -r "devnew"
  888  git checkout ga
  889  grep -r "devnew"
  890  ll
  891  echo ganewexclusive >> ganewexclusivefile.txt 
  892  git checkout dev
  893  ll
  894  grep -r "ganewe"
  895  git checkout ga
  896  git add .
  897  git commit -m "ganewexclusive"
  898  git checkout dev
  899  ll
  900  grep -r "ganewe"
  901  touch normal.txt
  902  echo "normal nevermind" >> normal.txt
  903  git add .
  904  git commit -m "123"
  905  git checkout ga
  906  ll
  907  cat normal.txt
  908  grep -r "nevermin"
  909  grep -r "normal"
  910  git branch
  911  touch gafile1
  912  echo first >> gafile1 
  913  git checkout -b ga1
  914  echo second >> gafile1 
  915  git add .
  916  git commit -m "1111"
  917  git branch ga
  918  git checkout ga
  919  git add .
  920  git commit -m "00000"
  921  echo first  >> gafile1 
  922  git add .
  923  git commit -m "00000"
  924  git checkout ga1
  925  git merge ga
  926  git rm file1
  927  ll
  928  git rm gafile1
  929  ll
  930  git add .
  931  git commit -m "000"
  932  git status
  933  touch fff123.txt
  934  echo 111111 >> fff123.txt 
  935  git add .
  936  git commit -m "111111111"
  937  git status
  938  git branch ga2
  939  echo 222222222 >> fff123.txt 
  940  git add .
  941  git commit -m "222222222"
  942  git checkout ga1
  943  git checkout ga2
  944  cat fff123.txt 
  945  git status
  946  git checkout ga1
  947  git status
  948  cat fff123.txt 
  949  git branch
  950  git merge ga2
  951  cat fff123.txt 
  952  git checkout ga2
  953  cat fff123.txt 
  954  echo 3333333 >> fff123.txt 
  955  git add .
  956  git commit -m "333"
  957  git branch
  958  git merge ga1
  959  git checkout ga1
  960  git merge ga2
  961  git checkout master
  962  git commit -a -m "888"
  963  git merge ga2
  964  git checkout master
  965  git log --oneline
  966  echo "_______merging______" >> githist.txt 
  967  history 200 >> githist.txt 
